{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","id","className","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOA6DeA,MA1Df,WACE,OACE,yBAAKC,GAAG,aACN,yBAAKA,GAAG,UAAUC,UAAU,SAC1B,yBAAKD,GAAG,YAER,yBAAKC,UAAU,YAEf,yBAAKD,GAAG,SACN,mCACA,mCACA,yCAIJ,wBAAIA,GAAG,UAEP,yBAAKA,GAAG,QAAQC,UAAU,SACxB,4EAEA,yBAAKD,GAAG,MACN,+EAGF,yBAAKA,GAAG,aACN,yBAAKA,GAAG,QAAQE,IAAI,wBACpB,0BAAMF,GAAG,QAAT,6rBAKJ,wBAAIA,GAAG,UAEP,yBAAKA,GAAG,WAAWC,UAAU,SAC3B,4BAAQA,UAAU,WAAlB,YACA,4BAAQA,UAAU,WAAlB,YACA,4BAAQA,UAAU,WAAlB,aAGF,wBAAID,GAAG,UAEP,yBAAKA,GAAG,cAAcC,UAAU,SAC9B,yBAAKD,GAAG,KAAR,iBAIA,yBAAKA,GAAG,YACN,yBAAKC,UAAU,YAAf,qBACA,yBAAKA,UAAU,YAAf,qBACA,yBAAKA,UAAU,YAAf,+BACA,yBAAKA,UAAU,YAAf,yBCzCUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e87af4a7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"container\">\n      <div id=\"initial\" className=\"pages\"> \n        <div id=\"boulder\"/>\n        \n        <div className=\"overlay\"/>\n        \n        <div id=\"intro\">\n          <h1>Hi.</h1>\n          <h1>i'm</h1>\n          <h1>Gabriel</h1>\n        </div> \n      </div>\n\n      <hr id=\"linha\"/>\n\n      <div id=\"about\" className=\"pages\">\n        <h2>Gamer, Boulder climber & front-end developer</h2>\n        \n        <div id=\"h3\">\n          <h3>\"I live my life doing everything that i enjoy\"</h3>\n        </div>\n\n        <div id=\"imagetext\">\n          <img id=\"image\" src=\"/img/tryndamere.png\"></img>\n          <span id=\"text\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque blandit eget erat a pellentesque. Fusce eu consectetur nisi. Nullam a ornare lectus. Vestibulum id lectus justo. In non gravida lacus. Ut at leo at dolor iaculis hendrerit. Cras et ex turpis. Pellentesque aliquam ornare auctor. Nunc dictum commodo quam, eget mattis massa laoreet nec. In eros quam, ullamcorper vitae felis porttitor, pellentesque semper lectus. Vestibulum eleifend ultricies lectus, eu sollicitudin nisi. Maecenas sed neque orci. Sed rutrum felis eros, quis elementum justo sagittis a. Nulla maximus lorem rutrum massa cursus blandit. Aliquam quis iaculis nunc. Donec commodo arcu non ipsum finibus interdum.</span>\n        </div>\n        \n      </div>\n\n      <hr id=\"linha\"/>\n\n      <div id=\"projects\" className=\"pages\">\n        <button className=\"buttons\">PROJETO1</button>\n        <button className=\"buttons\">PROJETO2</button>\n        <button className=\"buttons\">PROJETO3</button>\n      </div>\n\n      <hr id=\"linha\"/>\n\n      <div id=\"getintouche\" className=\"pages\">\n        <div id=\"a\">\n          GET IN TOUCHE\n        </div>\n\n        <div id=\"contatos\">\n          <div className=\"contatos\">Email@hotmail.com</div>\n          <div className=\"contatos\">github@github.com</div>\n          <div className=\"contatos\">number: (+55) 41 99999-9999</div>\n          <div className=\"contatos\">linkedin: gabriel</div>\n        </div>\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}